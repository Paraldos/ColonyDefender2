[gd_scene load_steps=16 format=2]

[ext_resource path="res://player/Megalaser.gd" type="Script" id=1]
[ext_resource path="res://img/Fragment02.png" type="Texture" id=2]
[ext_resource path="res://Tec/Hitbox.tscn" type="PackedScene" id=3]
[ext_resource path="res://audio/laser.wav" type="AudioStream" id=4]

[sub_resource type="Gradient" id=12]
offsets = PoolRealArray( 0, 0.693694, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=13]
gradient = SubResource( 12 )

[sub_resource type="ParticlesMaterial" id=14]
emission_shape = 5
emission_ring_radius = 30.0
emission_ring_inner_radius = 25.0
emission_ring_height = 1.0
emission_ring_axis = Vector3( 0, 0, 1 )
flag_align_y = true
flag_disable_z = true
spread = 0.0
gravity = Vector3( 0, 0, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
radial_accel = -1000.0
angle = 720.0
angle_random = 1.0
scale = 0.3
scale_random = 0.5
color = Color( 0, 1, 0.921569, 1 )
color_ramp = SubResource( 13 )

[sub_resource type="ParticlesMaterial" id=15]
emission_shape = 5
emission_ring_radius = 40.0
emission_ring_inner_radius = 35.0
emission_ring_height = 1.0
emission_ring_axis = Vector3( 0, 0, 1 )
flag_align_y = true
flag_disable_z = true
spread = 0.0
gravity = Vector3( 0, 0, 0 )
orbit_velocity = 0.0
orbit_velocity_random = 0.0
radial_accel = -1000.0
angle = 720.0
angle_random = 1.0
scale_random = 0.5
color_ramp = SubResource( 13 )

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 240.5, 7 )

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D:disabled")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="Animation" id=11]
resource_name = "loop"
length = 0.1
loop = true
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("CollisionShape2D:disabled")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.02 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Shader" id=8]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/energy-beams

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;
render_mode blend_add; // Remove this if you want to use HDR glow instead (use \"Glow\" and \"Outline Glow\" sliders)

uniform int beams = 2; // How many beams the energy field should have

uniform float energy = 3.0; // How much the beams will travel up and down
uniform int roughness : hint_range(1, 10) = 3; // How compact the noise texture will be
uniform int frequency = 10; // Amount of \"ripples\" in the beams

uniform float speed = 1.0; // Animation speed
uniform float thickness : hint_range(0.0, 0.1) = 0.006; // Thickness of the main beam
uniform float outline_thickness : hint_range(0.0, 0.1) = 0.03; //Thickness of the outline color
uniform float beam_difference : hint_range(0.0, 1.0) = 0.0; // The thickness difference between the main beam and the other, if there are more than one beam. The closer to 1 the smaller the thickness difference.

uniform float glow : hint_range(0.0, 3.0) = 0.0; // Use together with WorldEnvironment's Glow feature
uniform float outline_glow : hint_range(0.0, 3.0) = 0.0;

uniform vec4 color : hint_color = vec4(0.91, 1.0, 1.0, 1.0);
uniform vec4 outline_color : hint_color = vec4(0.5, 1.0, 0.96, 1.0);

uniform float progress : hint_range(0.0, 1.0) = 1.0;

uniform float y_offset : hint_range (-0.5, 0.5) = 0.0; // Position of the beam
uniform float fixed_edge_size : hint_range(0.0, 0.5) = 0.05; // How close to the edge should the beam be still before the animatino starts
uniform vec2 noise_scale = vec2(1.0); // If the object (for example the ColorRect or Sprite node) is compressed use this to compensate for the noise texture being compressed.

float random(vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) *
            43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    // Four corners in 2D of a tile
    float a = random(uv_index);
    float b = random(uv_index + vec2(1.0, 0.0));
    float c = random(uv_index + vec2(0.0, 1.0));
    float d = random(uv_index + vec2(1.0, 1.0));

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix(a, b, blur.x) +
            (c - a) * blur.y * (1.0 - blur.x) +
            (d - b) * blur.x * blur.y;
}

float fbm(vec2 uv, float time) {
    int octaves = roughness;
    float amp = 0.01 * energy * progress;
    float freq = float(frequency);
	float value = 0.0;
	
    for(int i = 0; i < octaves; i++) {
        value += amp * noise(freq * vec2(uv.x, uv.y + time));
        amp *= 0.5;
        freq *= 2.0;
    }
    return value;
}

vec4 difference(vec4 base, vec4 blend){
	return abs(base - blend);
}

vec4 bolt(vec2 uv, float time, float i)
{
	// Setup the beam locking to the edges.
	float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);
	
	// Use Fractal Brownian Motion to create a \"cloud texture\" and use Difference blend mode to make the beam
	vec4 clouds = vec4(fbm((uv + vec2(i) ) * noise_scale, time * speed)) * falloff;
	vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));
	
	// Create a new noise to mask the beams on low \"progress\" values. To make a \"turn-off\" effect more visually interesting.
	vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;
	diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);
	
	// Set thickness of the beams. First beam is the Thickness size and all following beams are sized with beam_difference
	float thickness2 =  1. - ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;
	vec4 beam = clamp(smoothstep(thickness2, thickness2 + 0.005 * progress, 1.0 - diff_clouds), vec4(0.0), vec4(1.0));
	
	//Set the beam outlines
	vec4 beam_outline;
	float outline = thickness2 - (outline_thickness * progress);
	beam_outline = clamp(smoothstep(outline, outline + 0.04, 1.0 - diff_clouds), 0.0, 1.0);
	beam_outline = clamp(beam_outline - beam, 0.0, 1.0);
	
	// Merge the beam and the outline and return to the fragment function
	return (beam * (color + vec4(glow, glow, glow, 0.))) + (beam_outline * (outline_color + vec4(outline_glow, outline_glow, outline_glow, 0.)));
}

void fragment()
{	
	vec4 beam = vec4(0.0);
	
	for (int i = 0; i < beams; i++){
		beam = max(beam, bolt(UV, TIME, float(i)));
	}
	
	COLOR = beam;
}"

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 8 )
shader_param/beams = 5
shader_param/energy = 3.0
shader_param/roughness = 3
shader_param/frequency = 8
shader_param/speed = 3.0
shader_param/thickness = 0.008
shader_param/outline_thickness = 0.025
shader_param/beam_difference = 0.0
shader_param/glow = 0.0
shader_param/outline_glow = 0.0
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/outline_color = Color( 0, 1, 0.921569, 1 )
shader_param/progress = 1.0
shader_param/y_offset = 0.0
shader_param/fixed_edge_size = 0.05
shader_param/noise_scale = Vector2( 2, 2 )

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Part:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Laser:volume_db")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 10.0 ]
}

[sub_resource type="Animation" id=6]
resource_name = "off"
length = 0.4
tracks/0/type = "method"
tracks/0/path = NodePath(".")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.4 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "_deactivate"
} ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ColorRect:material:shader_param/progress")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Part:emitting")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Laser:volume_db")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 10.0, -80.0 ]
}

[node name="Megalaser" type="Position2D"]
rotation = -1.5708
script = ExtResource( 1 )

[node name="Part" type="Particles2D" parent="."]
amount = 15
lifetime = 0.2
process_material = SubResource( 14 )
texture = ExtResource( 2 )

[node name="Part2" type="Particles2D" parent="."]
amount = 15
lifetime = 0.2
process_material = SubResource( 15 )

[node name="Hitbox" parent="." instance=ExtResource( 3 )]
collision_mask = 16

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hitbox"]
position = Vector2( 240.5, 0 )
shape = SubResource( 3 )
disabled = true

[node name="Anim" type="AnimationPlayer" parent="Hitbox"]
autoplay = "loop"
anims/RESET = SubResource( 10 )
anims/loop = SubResource( 11 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 9 )
margin_left = -21.0
margin_top = -136.0
margin_right = 459.0
margin_bottom = 136.0

[node name="Anim" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 7 )
anims/off = SubResource( 6 )

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="Laser" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 4 )
volume_db = 10.0
autoplay = true
bus = "SFX"

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
